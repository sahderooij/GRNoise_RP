% this function analysis pulse trains generated by recording TD data
% continously with laser pulsed by waveform generator.
% PdV June 2019 vs1
clear all

path = '\\MARS\kid\KIDonSun\experiments\Entropy ADR\Hf Goddard Chip 1\Pulselaser_1dB_4uW\TD_Power\'

nrfiles = 3; %nr of TD files per (Tbath,Pread)

%slow
% freq=50e3;              %standard is 50e3;
% rows=2e6;               %standard is 2e6; (ie sampling for 40 s at 50 kHz)

%vis
freq=1e6;                %datarate in samples/second. 1e6 or 2e6
rows=1e6;                %number of points in each file. 1e6 or 2e6
reppoints = 10e3;  %ie 10 ms at 1Msample/s, how many points for each pulse
startoffset = 500; %nrpoints to take before pulse

%select which KIDs, which Preads and which Temperatures to process. If startvalue is 0, the first is taken. If stopvalue > measured range, measured range is taken
kidnrstart=0;   kidnrstop=100;
powernrstart=1; powernrstop=1;
tempnrstart=0;  tempnrstop=100;

%%%%%%%%%%filenamestuff % automatically find which files in the folder and sort
%find the files
tempnoisefiles=dir([path '*_TDvis0_*.bin']);%need to set the # of vis-files at top.
disp([num2str(length(tempnoisefiles)) ' files found in ' path ' '])
maxnumkids=20;maxnumpower=20;maxnumT=50;%used for initial array size

%removing all files that are either longer or shorter than the
%mean (this can happen if TD-file is accidentely appended)
size=zeros(1,length(tempnoisefiles));
for n=1:length(tempnoisefiles)
    size(n)=tempnoisefiles(n).bytes;
end
datatoberead=size>0.5*mean(size) & size<1.5*mean(size);
noisefiles=tempnoisefiles(datatoberead);
clear size;

%get kidnr,power,temperature from filenames
tnoisekids=zeros(length(noisefiles),3); %this is a temporary variable
for nn=1:length(noisefiles)
    %error for textscan
    if isempty(noisefiles(nn).name)==1
        error('file empty');
    end
    %This alternative for the textscan method works for both GR noise (dark) and photon noise (optical) bin-files
    %filename structure is always: 'KIDn_mdBm_Tchipy_TD*_TmKl.bin' where n=KID number, m=readout power, 
    %* = either 'med'(dark), 'fastt'(optical) for the 50 kHz file and 'fast' (dark) and 'slow' (optical) for the 1 MHz file
    %'Tchipy' is only there for optical files for dark files empty, l=temperature of bath(dark), blackbody (optical)
    [ligstreep]=regexpi(noisefiles(nn).name,'_');   %identify underscore positions in filename
    [ndBm]=regexpi(noisefiles(nn).name,'dBm');      %where 'dBm' starts, ie the position of the d
    [~,nTmK]=regexpi(noisefiles(nn).name,'TmK');    %end of 'TmK', ie position of the K
    [ndotbin]=regexpi(noisefiles(nn).name,'.bin');  %position of the dot
    tnoisekids(nn,1)=str2double(noisefiles(nn).name(4:ligstreep(1)-1));         %kid number
    tnoisekids(nn,2)=str2double(noisefiles(nn).name(ligstreep(1)+1:ndBm-1));    %readout power
    tnoisekids(nn,3)=str2double(noisefiles(nn).name(nTmK+1:ndotbin-1));         %temperature in mK, is either base temperature (dark) or blackbody temperature (optical)
end
%sort on kidnr 1,power 2,temperature 3
allkidfiles=sortrows(tnoisekids,[1 2 3]);
clear ligstreep ndBm nTmK ndotbin tnoisekids

%get all KID ID's in 1 array and put all powers in a cell array for each KID
n=1;m=1;k=1;%n=kids,m=powers,k=temperatures
maxm=1;maxk=1;%allows different #powers and #temp for each kid/power
noisekids=zeros(maxnumkids,1);noisekids(1)=allkidfiles(1,1);
kidsP=cell(maxnumkids,1);kidsPtemp=zeros(maxnumpower,1);kidsPtemp(1)=allkidfiles(1,2);
kidsT=cell(maxnumkids,maxnumpower);kidsTtemp=zeros(maxnumT,1);kidsTtemp(1)=allkidfiles(1,3);
for nn=1:length(allkidfiles)
    if m>maxm; maxm=m;end
    if noisekids(n)~=allkidfiles(nn,1) %if new KID name found
        kidsPtemp(m+1:end)=[];kidsP{n}=kidsPtemp;kidsPtemp=zeros(maxnumpower,1);
        kidsTtemp(k:end)=[];kidsT{n,m}=kidsTtemp;kidsTtemp=zeros(maxnumT,1);
        n=n+1;
        kidsPtemp(1)=allkidfiles(nn,2);%this is to skip the 'new Power' if there is a new KID
        m=1;k=1;
        noisekids(n)=allkidfiles(nn,1);
    end
    if kidsPtemp(m)~=allkidfiles(nn,2) %if new Power found
        kidsTtemp(k:end)=[];kidsT{n,m}=kidsTtemp;kidsTtemp=zeros(maxnumT,1);
        m=m+1;
        if k>maxk; maxk=k-1; end
        k=1;
        kidsPtemp(m)=allkidfiles(nn,2);
    end
    kidsTtemp(k)=allkidfiles(nn,3);
    k=k+1;
end
%write into array for last step
kidsPtemp(m+1:end)=[];kidsP{n}=kidsPtemp;
kidsTtemp(k:end)=[];kidsT{n,m}=kidsTtemp;
clear kidsPtemp kidsTtemp nn
%delete some unneeded extra cells
noisekids(n+1:end)=[];
kidsP(n+1:end)=[];
kidsT(n+1:end,:)=[];
kidsT(:,m+1:end)=[];
%%%%%%here ends the filenamestuff%%%%%%%%%%%%%%%%%%%%%%%%%
kidnrstart = max(kidnrstart,1);kidnrstop = min(kidnrstop,length(noisekids));
for n=kidnrstart:kidnrstop
    powernrstart = max(powernrstart,1);powernrstop = min(powernrstop,length(kidsP{n}));
    for m=powernrstart:powernrstop
        tempnrstart = max(tempnrstart,1);tempnrstop = min(tempnrstop,length(kidsT{n,m}));
        figTbath = figure;
        figTbathPSD = figure;
        for k=tempnrstart:tempnrstop
            %this can all be done much more efficiently in the #variables, but not done unless becomes routine script (PdV)
            KIDnr = noisekids(n);
            Pread = kidsP{n}(m);
            Tbath = kidsT{n,m}(k);
            averagepulsePlong = zeros(nrfiles,reppoints);
            averagepulseRlong = zeros(nrfiles,reppoints);
            averagepulseIlong = zeros(nrfiles,reppoints);
            averagepulseQlong = zeros(nrfiles,reppoints);
            for kk=1:nrfiles
                %opens a binary file made by labview and reads 64 bit floating point data.
                %labview 'header': First 4 bytes: rows in uint, second 4 bytes: columns in uint. 
                %Than data row by row in BIG ENDIAN
                %PWELCH = PSD * 2/samplefreq!!!

                filename = ['KID' num2str(KIDnr) '_' num2str(Pread) 'dBm__TDvis' num2str(kk-1) '_TmK' num2str(Tbath) '.bin'];
                filenamepath = [path filename];

                %%%%%%%%%%%FOR DATA-FILE ON RESONANCE
                [fid,message]=fopen(filenamepath,'r','ieee-be.l64'); %open in Big endian 64 bit floating point number
                if ~isempty(message)
                    fprintf([message '\n']);
                end
                %filenameforsize=dir(filename);

                columns=2;
                corroff=1;
                crosstime=0; %computes cross-correlation of amp and phase in time

                %reduces memory
                readlength=10000; %read readlength rows at a time
                pp=ceil(rows/readlength);
                I(1:rows)=0;
                Q=I;

                idx=1;
                for tel=1:pp
                    rlen=rows-(tel-1)*readlength;
                    if rlen>readlength; rlen=readlength;end
                    Matrix=fread(fid,[columns,rlen],'float64')';
                    I2=Matrix(:,1)';
                    Q2=Matrix(:,2)';
                    I( idx : idx+rlen-1 )=I2;
                    Q( idx : idx+rlen-1 )=Q2;
                    idx=idx+rlen;
                end

                fclose(fid);
                clear Matrix;

                makeIQrp=1; %leave this option 1!!!%here variables I and Q are translated in R and P
                if makeIQrp==1
                    r=sqrt(I.^2+Q.^2);
                    R=r/mean(r); %normalize radius to 1
                    p=atan2(Q,I);%This phase is with respect to the axis in the direction (I,Q)=(1,0) in stead of (-1,0) therefore next line
                    P=pi-mod(p,2*pi);
                    %P=tan(P);
                end

                %get the pulse traces on top of each other and sum (note this is not triggered so could start any moment within duty cycle)
                startpulse = startoffset; %offset from pulse start. this is just a number on first iteration
                nrpulses = floor(rows/reppoints)-1; %the -1 makes sure that if the first pulse is at end-edge of window we can shift the window
                averagepulseP = sum(reshape(P(startpulse:rows-reppoints+startpulse-1),[reppoints nrpulses]),2)/nrpulses;
                %check where the pulse starts and shift the window
                baselineestimate = min(mean(averagepulseP(1:startoffset)),mean(averagepulseP(end-startoffset:end)));
                %stdestimate takes the minimum of a few traces of length startoffset from beginning, middle and end of trace to make sure it is taken from a piece without pulse
                stdestimate = min([std(averagepulseP(1:startoffset)),std(averagepulseP(end-startoffset:end)),std(averagepulseP(reppoints/2:reppoints/2+startoffset))]);
                pulsestartestimate = (averagepulseP-baselineestimate)>(20*stdestimate);
                vectorpulsestart = find(pulsestartestimate);
                [~,maxindex] = max(averagepulseP);
                if maxindex>startoffset
                    vectorpulsestart(vectorpulsestart<startoffset) = []; %this is to catch that a pulse is halfway its decay at t=0;
                end
                startpulse = vectorpulsestart(1);
                averagepulsePlong(kk,:) = sum(reshape(P(startpulse:rows-reppoints+startpulse-1),[reppoints nrpulses]),2)/nrpulses;
                averagepulseRlong(kk,:) = sum(reshape(R(startpulse:rows-reppoints+startpulse-1),[reppoints nrpulses]),2)/nrpulses;
                averagepulseIlong(kk,:) = sum(reshape(I(startpulse:rows-reppoints+startpulse-1),[reppoints nrpulses]),2)/nrpulses;
                averagepulseQlong(kk,:) = sum(reshape(Q(startpulse:rows-reppoints+startpulse-1),[reppoints nrpulses]),2)/nrpulses;
            end
            timepulse = linspace(0,1,reppoints)*reppoints/freq;
            averagepulseP = sum(averagepulsePlong)/nrfiles;
            averagepulseR = sum(averagepulseRlong)/nrfiles;
            averagepulseI = sum(averagepulseIlong)/nrfiles;
            averagepulseQ = sum(averagepulseQlong)/nrfiles;
            
            %fit with automatic range finding
            [~, indexmaxphase] = max(averagepulseP);
            baselineestimate = mean(averagepulseP(end-startoffset:end));
            stdestimate = std(averagepulseP(end-startoffset:end));
            vectorfitstop = find((averagepulseP-baselineestimate)>(100*stdestimate));
            indexstopfit = length(averagepulseP);
            if ~isempty(vectorfitstop)
                indexstartfit = vectorfitstop(end);
            else
                indexstartfit = indexmaxphase + 20; %the 20 here is just a number, you don't want to start at the top
            end
            s = fitoptions('Method','NonlinearLeastSquares','Startpoint',[1 1e-4]);
            ftype = fittype('a*exp(-(x)/b)','options', s);
            [fitresultP, ~]=fit(timepulse(indexstartfit:indexstopfit)',averagepulseP(indexstartfit:indexstopfit)'-baselineestimate,ftype); %it is better to fit with baseline subtracted to reduce fitparameters
            [fitresultR, ~]=fit(timepulse(indexstartfit:indexstopfit)',1-averagepulseR(indexstartfit:indexstopfit)',ftype); %it is better to fit with baseline subtracted to reduce fitparameters
            fitcurveP=fitresultP.a.*exp(-timepulse(indexstartfit:indexstopfit)./fitresultP.b);
            fitcurveR=fitresultR.a.*exp(-timepulse(indexstartfit:indexstopfit)./fitresultR.b);
            
            %fit range 1 (high/short)
            indexstartfita = startoffset+50;
            indexstopfita = indexstartfita+200;
            s = fitoptions('Method','NonlinearLeastSquares','Startpoint',[1 1e-4]);
            ftype = fittype('a*exp(-(x)/b)','options', s);
            [fitresultPa, ~]=fit(timepulse(indexstartfita:indexstopfita)',averagepulseP(indexstartfita:indexstopfita)'-baselineestimate,ftype); %it is better to fit with baseline subtracted to reduce fitparameters
            [fitresultRa, ~]=fit(timepulse(indexstartfita:indexstopfita)',1-averagepulseR(indexstartfita:indexstopfita)',ftype); %it is better to fit with baseline subtracted to reduce fitparameters
            fitcurvePa=fitresultPa.a.*exp(-timepulse(indexstartfita:indexstopfita)./fitresultPa.b);
            fitcurveRa=fitresultRa.a.*exp(-timepulse(indexstartfita:indexstopfita)./fitresultRa.b);
            
            %fit range 2 (low/long)
            indexstartfitb = startoffset+800;
            indexstopfitb = indexstartfitb+2500;
            s = fitoptions('Method','NonlinearLeastSquares','Startpoint',[1 1e-3]);
            ftype = fittype('a*exp(-(x)/b)','options', s);
            [fitresultPb, ~]=fit(timepulse(indexstartfitb:indexstopfitb)',averagepulseP(indexstartfitb:indexstopfitb)'-baselineestimate,ftype); %it is better to fit with baseline subtracted to reduce fitparameters
            [fitresultRb, ~]=fit(timepulse(indexstartfitb:indexstopfitb)',1-averagepulseR(indexstartfitb:indexstopfitb)',ftype); %it is better to fit with baseline subtracted to reduce fitparameters
            fitcurvePb=fitresultPb.a.*exp(-timepulse(indexstartfitb:indexstopfitb)./fitresultPb.b);
            fitcurveRb=fitresultRb.a.*exp(-timepulse(indexstartfitb:indexstopfitb)./fitresultRb.b);
            
            %1/t fit
            indexstart1tfit = startoffset+50;
            indexstop1tfit  = 800;
            s = fitoptions('Method','NonlinearLeastSquares');
            ftype = fittype('a*1/x+b','options', s);
            [fitresult1tP, ~]=fit(timepulse(indexstart1tfit:indexstop1tfit)',averagepulseP(indexstart1tfit:indexstop1tfit)'-baselineestimate,ftype); %it is better to fit with baseline subtracted to reduce fitparameters
            fitcurve1tP=fitresult1tP.a./timepulse(indexstart1tfit:indexstop1tfit)+fitresult1tP.b;
     
            %calculate PSD of the averagepulse
            [spp,fmbt]=pwelch(averagepulseP,reppoints,[],reppoints,freq,'onesided');
            [KID(n).fmb,KID(n).PSDaveragepulseP{m,k}]=logsmooth(fmbt,spp,20);
            [srr,fmbt]=pwelch(averagepulseR,reppoints,[],reppoints,freq,'onesided');
            [~,KID(n).PSDaveragepulseR{m,k}]=logsmooth(fmbt,srr,20);
            
            figpulse1 = figure;
            subplot(2,2,1)
            plot(timepulse,averagepulseP-baselineestimate);hold on
            plot(timepulse(indexstartfit:indexstopfit),fitcurveP,'Linewidth',2)
            plot(timepulse(indexstartfita:indexstopfita),fitcurvePa,'Linewidth',2)
            plot(timepulse(indexstartfitb:indexstopfitb),fitcurvePb,'Linewidth',2)
            plot(timepulse(indexstart1tfit:indexstop1tfit),fitcurve1tP,'Linewidth',2);
            xlabel('time (s)');ylabel('KID-phase (rad)')
            legend('measurement',['fit ' num2str(round(fitresultP.b*1e6)) ' \mus'],['fit a ' num2str(round(fitresultPa.b*1e6)) ' \mus'],['fit b ' num2str(round(fitresultPb.b*1e6)) ' \mus'],'1/t fit')
            title(['KID' num2str(KIDnr) ', -' num2str(Pread) ' dBm, ' num2str(Tbath) ' mK'])

            subplot(2,2,2)
            plot(timepulse,1-averagepulseR);hold on
            plot(timepulse(indexstartfit:indexstopfit),fitcurveR,'Linewidth',2)
            plot(timepulse(indexstartfita:indexstopfita),fitcurveRa,'Linewidth',2)
            plot(timepulse(indexstartfitb:indexstopfitb),fitcurveRb,'Linewidth',2)
            xlabel('time (s)');ylabel('KID-amplitude')
            legend('measurement',['fit ' num2str(round(fitresultR.b*1e6)) ' \mus'],['fit a ' num2str(round(fitresultRa.b*1e6)) ' \mus'],['fit b ' num2str(round(fitresultRb.b*1e6)) ' \mus'])

            subplot(2,2,3)
            semilogy(timepulse,averagepulseP-baselineestimate);hold on
            semilogy(timepulse(indexstartfit:indexstopfit),fitcurveP,'Linewidth',2)
            semilogy(timepulse(indexstartfita:indexstopfita),fitcurvePa,'Linewidth',2)
            semilogy(timepulse(indexstartfitb:indexstopfitb),fitcurvePb,'Linewidth',2)
            semilogy(timepulse(indexstart1tfit:indexstop1tfit),fitcurve1tP,'Linewidth',2);
            xlabel('time (s)');ylabel('KID-phase (rad)')
            legend('measurement',['fit ' num2str(round(fitresultP.b*1e6)) ' \mus'],['fit a ' num2str(round(fitresultPa.b*1e6)) ' \mus'],['fit b ' num2str(round(fitresultPb.b*1e6)) ' \mus'],'1/t fit')

            subplot(2,2,4)
            semilogy(timepulse,1-averagepulseR);hold on
            semilogy(timepulse(indexstartfit:indexstopfit),fitcurveR,'Linewidth',2)
            semilogy(timepulse(indexstartfita:indexstopfita),fitcurveRa,'Linewidth',2)
            semilogy(timepulse(indexstartfitb:indexstopfitb),fitcurveRb,'Linewidth',2)
            xlabel('time (s)');ylabel('KID-amplitude')
            legend('measurement',['fit ' num2str(round(fitresultR.b*1e6)) ' \mus'],['fit a ' num2str(round(fitresultRa.b*1e6)) ' \mus'],['fit b ' num2str(round(fitresultRb.b*1e6)) ' \mus'])

            scalefactor = max(averagepulseP-baselineestimate)/max(1-averagepulseR);

            figpulse2 = figure;
            subplot(2,2,1)
            plot(timepulse,(1-averagepulseR)*scalefactor,timepulse,averagepulseP-baselineestimate)
            legend('rescaled amplitude','phase')
            xlabel('time (s)');ylabel('amplitude or phase')
            title(['KID' num2str(KIDnr) ', -' num2str(Pread) ' dBm, ' num2str(Tbath) ' mK'])

            subplot(2,2,2)
            plot(averagepulseI,averagepulseQ)
            xlabel('I');ylabel('Q')

            savefig(figpulse1,[path 'KID' num2str(KIDnr) '_' num2str(Pread) 'dBm_' num2str(kk-1) '_TmK' num2str(Tbath) '_pulse1.fig'])
            savefig(figpulse2,[path 'KID' num2str(KIDnr) '_' num2str(Pread) 'dBm_' num2str(kk-1) '_TmK' num2str(Tbath) '_pulse2.fig'])
            close(figpulse2)
            %put the output in a struct to make analysis later vs T and P
            KID(n).averagepulseP{m,k} = averagepulseP;
            KID(n).baselineestimate(m,k) = baselineestimate;
            KID(n).averagepulseR{m,k} = averagepulseR;
            KID(n).averagepulseI{m,k} = averagepulseI;
            KID(n).averagepulseQ{m,k} = averagepulseQ;
            %output of fit parameters
            KID(n).timeP_1(m,k) = fitresultP.b;
            KID(n).fitfactorP_1(m,k) = fitresultP.a;
            KID(n).timeR_1(m,k) = fitresultR.b;
            KID(n).fitfactorR_1(m,k) = fitresultR.a;
            KID(n).timeP_1a(m,k) = fitresultPa.b;
            KID(n).timeR_1a(m,k) = fitresultRa.b;
            KID(n).timeP_1b(m,k) = fitresultPb.b;
            KID(n).timeR_1b(m,k) = fitresultRb.b;
            
            figure(figTbath)
            subplot(2,2,2)
            plot(timepulse,averagepulseP-baselineestimate);hold on
            xlabel('time (s)');ylabel('KID-phase')
            subplot(2,2,3)
            plot(timepulse,1-averagepulseR);hold on
            xlabel('time (s)');ylabel('KID-amplitude')
            subplot(2,2,4)
            semilogy(timepulse,averagepulseP-baselineestimate);hold on
            xlabel('time (s)');ylabel('KID-phase')
            legendbla{k} = num2str(Tbath);
            
            figure(figTbathPSD)
            subplot(1,2,1)
            semilogx(KID(n).fmb,10*log10(KID(n).PSDaveragepulseP{m,k}));hold on
            xlabel('Frequency (Hz)');ylabel('PSD Phase (dBc/Hz)')
            title(['PSD average pulse, KID' num2str(KIDnr) ', -' num2str(Pread) ' dBm'])

            subplot(1,2,2)
            semilogx(KID(n).fmb,10*log10(KID(n).PSDaveragepulseR{m,k}));hold on
            xlabel('Frequency (Hz)');ylabel('PSD Amplitude (dBc/Hz)')

        end%loop Temperature
        
        figure(figTbath)
        subplot(2,2,1)
        plot(kidsT{n,m}(tempnrstart:tempnrstop),KID(n).timeP_1(m,:)*1e6,'o');hold on
        plot(kidsT{n,m}(tempnrstart:tempnrstop),KID(n).timeR_1(m,:)*1e6,'s')
        plot(kidsT{n,m}(tempnrstart:tempnrstop),KID(n).timeP_1a(m,:)*1e6,'o');
        plot(kidsT{n,m}(tempnrstart:tempnrstop),KID(n).timeR_1a(m,:)*1e6,'s')
        plot(kidsT{n,m}(tempnrstart:tempnrstop),KID(n).timeP_1b(m,:)*1e6,'o');
        plot(kidsT{n,m}(tempnrstart:tempnrstop),KID(n).timeR_1b(m,:)*1e6,'s')
        xlabel('Temperature (mK)');ylabel('decay time (\mus)')
        legend('Phase','Amplitude','P fit-a','A fit-a','P fit-b','A fit-b')
        title(['KID' num2str(KIDnr) ', -' num2str(Pread) ' dBm'])
        subplot(2,2,3)
        legend(legendbla)

        savefig(figTbath,[path 'KID' num2str(KIDnr) '_' num2str(Pread) 'dBm_' num2str(kk-1) '_Tdependence.fig'])
        
        figure(figTbathPSD)
        subplot(1,2,1)
        legend(legendbla)
        savefig(figTbath,[path 'KID' num2str(KIDnr) '_' num2str(Pread) 'dBm_' num2str(kk-1) '_Tdependence_pulsePSD.fig'])

    end%loop Pread
end%loop kids